import pandas as pd
import numpy as np
import sys
df = pd.read_csv("housing.csv",header=None)
X = df.iloc[:,0:13].to_numpy()
y = df.iloc[:,13].to_numpy()
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler = scaler.fit(X)
X[:] = scaler.transform(X)

import numpy as np
import sys
class NeuralNetMLP(object):
    def __init__(self, n_hidden=30, l2=0., epochs=100, eta=0.001, shuffle=True,minibatch_size=1, seed=None):
        self.random = np.random.RandomState(seed)
        self.n_hidden = n_hidden
        self.l2 = l2
        self.epochs = epochs
        self.eta = eta
        self.shuffle = shuffle
        self.minibatch_size = minibatch_size
    def _sigmoid(self, z):
        return 1. / (1. + np.exp(-np.clip(z, -250, 250)))
    def _forward(self, X):
        z_h = np.dot(X, self.w_h) + self.b_h
        a_h = self._sigmoid(z_h)
        z_out = np.dot(a_h, self.w_out) + self.b_out
        a_out = self._sigmoid(z_out)
        return z_h, a_h, z_out, a_out
    def _compute_cost(self, y, output):
        cost = np.sum((y - output) ** 2)
        return cost
    def predict(self, X):
        z_h, a_h, z_out, a_out = self._forward(X)
        y_pred = np.argmax(z_out, axis=1)
        return y_pred
    def fit(self, X_train, y_train, X_valid, y_valid):
        n_output = 1 
        n_features = X_train.shape[1]
        self.b_h = np.zeros(self.n_hidden)
        self.w_h = self.random.normal(loc=0.0, scale=0.1, size=(n_features, self.n_hidden))
        self.b_out = np.zeros(n_output)
        self.w_out = self.random.normal(loc=0.0, scale=0.1,size=(self.n_hidden, n_output))
        epoch_strlen = len(str(self.epochs)) 
        self.eval_ = {'cost': [], 'train_mse': [], 'valid_mse': []}
        for i in range(self.epochs):
            indices = np.arange(X_train.shape[0])
            if self.shuffle:
                self.random.shuffle(indices)
                for start_idx in range(0, indices.shape[0] -self.minibatch_size +1, self.minibatch_size):
                    batch_idx = indices[start_idx:start_idx+self.minibatch_size]
                    # forward propagation
                    z_h, a_h, z_out, a_out = self._forward(X_train[batch_idx])
                    ##################
                    # Backpropagation
                    ##################
                    sigma_out = a_out - y_train[batch_idx]
                    sigmoid_derivative_h = a_h * (1. - a_h)
                    sigma_h = (np.dot(sigma_out, self.w_out.T) * sigmoid_derivative_h)
                    grad_w_h = np.dot(X_train[batch_idx].T, sigma_h)
                    grad_b_h = np.sum(sigma_h, axis=0)
                    grad_w_out = np.dot(a_h.T, sigma_out)
                    grad_b_out = np.sum(sigma_out, axis=0)
                    # Regularization and weight updates
                    delta_w_h = (grad_w_h + self.l2*self.w_h)
                    delta_b_h = grad_b_h # bias is not regularized
                    self.w_h -= self.eta * delta_w_h
                    self.b_h -= self.eta * delta_b_h
                    delta_w_out = (grad_w_out + self.l2*self.w_out)
                    delta_b_out = grad_b_out # bias is not regularized
                    self.w_out -= self.eta * delta_w_out
                    self.b_out -= self.eta * delta_b_out
                #############
                # Evaluation
                #############
                # Evaluation after each epoch during training
                z_h, a_h, z_out, a_out = self._forward(X_train)
                cost = self._compute_cost(y, a_out)
                y_train_pred = self.predict(X_train)
                y_valid_pred = self.predict(X_valid)
                train_mse = (np.mean((y_train - y_train_pred) ** 2).astype(np.float))
                valid_mse = (np.mean((y_valid - y_valid_pred) ** 2).astype(np.float))
                self.eval_['cost'].append(cost)
                self.eval_['train_mse'].append(train_mse)
                self.eval_['valid_mse'].append(valid_mse)
        return self
        
from sklearn.model_selection import train_test_split
nn = NeuralNetMLP()
nn.fit(X_train=X[:350],y_train=y[:350],X_valid=X[350:],y_valid=y[350:])

import matplotlib.pyplot as plt
plt.plot(range(nn.epochs), nn.eval_['cost'])
plt.ylabel('Cost')
plt.xlabel('Epochs')
plt.show()

from sklearn.metrics import mean_squared_error
y_valid_pred = nn.predict(X_valid)
a = mean_squared_error(y_valid, y_valid_pred)
print("MSE:",a)
